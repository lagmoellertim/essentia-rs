name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    container: lagmoellertim/essentia:latest-tensorflow
    
    steps:  
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y curl wget pkg-config build-essential git
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup git
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Install cargo-workspaces for version management
      run: |
        cargo install cargo-workspaces --locked

    - name: Update versions in all Cargo.toml files
      run: |
        RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        echo "Bumping all crates using $RELEASE_TYPE version bump"
        
        # Use cargo-workspaces to bump all workspace members and their dependencies
        cargo ws version --no-git-commit --force "*" --exact --yes $RELEASE_TYPE
        
        # Get the new version that was set
        NEW_VERSION=$(grep '^version = ' essentia/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "All workspace crates updated to version $NEW_VERSION"

    - name: Update Cargo.lock
      run: |
        cargo check --all

    - name: Run tests to ensure everything works
      run: |
        cargo test --all --verbose

    - name: Build version
      run: |
        cargo build --all

    - name: Generate documentation
      run: |
        cargo doc --no-deps --all-features --workspace
        
    - name: Create git tag and commit
      run: |
        NEW_VERSION="${NEW_VERSION}"
        
        git add .
        git commit -m "chore: bump version to $NEW_VERSION" || echo "No changes to commit"
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"

    - name: Check if version is already published
      id: check_version
      run: |
        NEW_VERSION="${NEW_VERSION}"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this version is already published
        if cargo search essentia --limit 1 | grep -q "essentia = \"$NEW_VERSION\""; then
          echo "already_published=true" >> $GITHUB_OUTPUT
          echo "Version $NEW_VERSION is already published"
        else
          echo "already_published=false" >> $GITHUB_OUTPUT
          echo "Version $NEW_VERSION is not yet published"
        fi

    - name: Dry run publish
      if: steps.check_version.outputs.already_published == 'false'
      run: |
        echo "Running dry-run publish for all packages..."
        cargo publish --dry-run -p essentia-sys
        cargo publish --dry-run -p essentia-core
        cargo publish --dry-run -p essentia-codegen
        cargo publish --dry-run -p essentia

    - name: Publish to crates.io
      if: steps.check_version.outputs.already_published == 'false'
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        NEW_VERSION="${NEW_VERSION}"
        echo "Publishing packages to crates.io version $NEW_VERSION..."
        
        # Publish in dependency order with proper error handling
        echo "Publishing essentia-sys..."
        cargo publish -p essentia-sys --token $CARGO_REGISTRY_TOKEN
        
        echo "Waiting for essentia-sys to be available..."
        sleep 30
        
        echo "Publishing essentia-core..."
        cargo publish -p essentia-core --token $CARGO_REGISTRY_TOKEN
        
        echo "Waiting for essentia-core to be available..."
        sleep 30
        
        echo "Publishing essentia-codegen..."
        cargo publish -p essentia-codegen --token $CARGO_REGISTRY_TOKEN
        
        echo "Waiting for essentia-codegen to be available..."
        sleep 30
        
        echo "Publishing essentia..."
        cargo publish -p essentia --token $CARGO_REGISTRY_TOKEN

    - name: Push git changes and tags
      if: steps.check_version.outputs.already_published == 'false'
      run: |
        git push origin main
        git push origin --tags

    - name: Create GitHub Release
      if: steps.check_version.outputs.already_published == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Release v${{ env.NEW_VERSION }}
          
          ### Changes
          - ${{ github.event.inputs.release_type }} version bump
          
          ### Installation
          ```toml
          [dependencies]
          essentia = "${{ env.NEW_VERSION }}"
          ```
        draft: false
        prerelease: false
